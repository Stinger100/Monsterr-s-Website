<% include ../partials/header.ejs %>
<% include ../partials/sidebar.ejs%>
<div class="container">
    <div class="row">
        <div class="block m-auto txt-center">
            <h1 class="abouth1">Install Survey Module</h1>
        </div>
    </div>
    <hr class="my-4" id="hrinstall">
    <div class="row">
        <p class="pinstall">
            An example stage for a survey that uses the surveyjs package for node, so it is easy to generate new surveys with a survey builder.
            When a client is finished with the survey, it sends the data to the client that saves it to a json-file with lowdb. The admin client
            can at any time request the saved data as either json or csv (note that some advanced survey features is not supported by the csv
            converter, so it might be safer to save the json file). The data is stored in the db.json file until it is cleared or deleted.
        </p>
        <p class="pinstall">
            To run the survey, the admin clients will wait until the participants of the game are connected and then he would need to press
            the start button in order to start the survey for the clients. After the survey is finished, the admin client has two options for downloading
            the survey: Json and CSV formats.
        </p>
    </div>
<div class="row">
            <img src="/style/img/surveyyy.png" class="rounded mx-auto d-block" id="survey" alt="survey" >

</div>
    <p class="pinstall">
        Now you can have a look at the client view. Here you can see that there is a limit of four questions/ page. Surely,
        you can set up to display more than 4 questions on the page. Design of the survey can be easily customized.
    </p>
    <div class="row">
        <img src="/style/img/survey.png" class="rounded mx-auto d-block" id="survey" alt="survey" >
    </div>

    <h4 class="pinstall">Setup</h4>
    <ol class="ollatency">
        <li id="latencyid">
            Install the db from the terminal.
        </li>
        <div class="installcomands"><p> npm install lowdb</p></div>
        <li id="latencyid"> Copy the db folder to you project.</li>
        <div class="installcomands"><p> copy ./src/database/folder </p></div>
        <li id="latencyid"> Copy the survey folder to your project and give it a suggestive name.</li>
        <div class="installcomands"><p> copy ./src/stages/survey/ </p></div>
        <li id="latencyid">Now, you need to import the database, the survey and commands in server.js file.</li>
        <div class="installcomands"><p><em id="red">import</em> {DatabaseHandler} <em id="red">from</em> './src/database/DatabaseHandler' </p>
                                    <p><em id="red">import</em> survey <em id="red">from</em> './src/stages/survey/server/server'</p>
            <p><em id="red">let</em>  commands = {
            <p><em id="purple">&ensp; 'reqJSON'</em> : (server, clientId) <em id="red">=></em> {</p>
                                  <p><em id="red">&ensp;&ensp; let</em> json = DatabaseHandler.<em id="purple">exportAsJSON()</em>
            <p>&ensp;&ensp; server.<em id="command">send</em>('resJSON', json).<em id="command">toAdmin()</em></p>
                                      <p>  },</p>

            <p><em id="red">let</em>  commands = {
            <p><em id="purple">&ensp; 'reqCSV'</em> : (server, clientId) <em id="red">=></em> {</p>
            <p><em id="red">&ensp;&ensp; let</em> csv = DatabaseHandler.<em id="purple">exportAssCSV()</em>
            <p>&ensp;&ensp; server.<em id="command">send</em>('resCSV', csv).<em id="command">toAdmin()</em></p>
            <p>  },</p>

        </div>
        <li id="latencyid">In the admin-client.hmtl file, you will need to add the html button for json and csv files. In admin-client.js you need to add the listener
            and the events.
        </li>
        <div class="installcomands">
            <p><em id="purple">$</em>('#admin-button-download-json').<em id="purple">mouseup</em>(e <em id="red">=></em> { </p>
            <p>&ensp;  e.<em id="command">preventDefault</em>()</p>
            <p>&ensp;  admin.<em id="purple">sendCommand</em>('reqJSON')</p>
             <p>   })</p>
            <p><em id="purple">$</em>('#admin-button-download-csv').<em id="purple">mouseup</em>(e <em id="red">=></em> { </p>
            <p>&ensp;  e.<em id="command">preventDefault</em>()</p>
            <p>&ensp;  admin.<em id="purple">sendCommand</em>('reqCSV')</p>
            <p>   })</p>

            <p> let events = { </p>
            <p>&ensp; <em id="purple">'resJSON'</em>: (admin, json) <em id="red">=></em> { </p>
            <p>&ensp;&ensp; <em id="red">let</em> fileName = 'monsterr-modules_'<em id="red">+</em> <em id="command">Date</em><em id="purple">.now</em>() <em id="red">+</em> '.csv'</p>
            <p>&ensp;&ensp; <em id="red">let</em>  data = <em id="purple">JSON.stringify</em>(json)</p>
            <p>&ensp;&ensp; <em id="red">let</em> url = <em id="command">window.URL</em><em id="purple">.createObjectURL</em>(<em id="red">new</em> <em id="purple">Blob</em>([data], {type: 'text/json'}))</p>
            <p>&ensp;&ensp; <em id="red">var</em> a = <em id="command">document.createElement</em>('a')</p>
            <p>&ensp;&ensp; <em id="command">document.body.appendChild</em>(a)</p>
            <p>&ensp;&ensp; a.<em id="command">style</em> = 'display: none'</p>
            <p>&ensp;&ensp; a.<em id="command">href</em> = url</p>
            <p>&ensp;&ensp; a.download = fileName</p>
            <p>&ensp;&ensp; a.<em id="command">click</em>()</p>
            <p>&ensp;&ensp; <em id="command">window.URL</em><em id="purple">.revokeObjectURL</em>(url)
            <p>&ensp; },</p>

            <p>&ensp; <em id="purple">'resCSV'</em>: (admin, csv) <em id="red">=></em> { </p>
            <p>&ensp;&ensp; <em id="red">let</em> fileName = 'monsterr-modules_'<em id="red">+</em> <em id="command">Date</em><em id="purple">.now</em>() <em id="red">+</em> '.csv'</p>
            <p>&ensp;&ensp; <em id="red">let</em>  data = <em id="purple">JSON.stringify</em>(json)</p>
            <p>&ensp;&ensp; <em id="red">let</em> url = <em id="command">window.URL</em><em id="purple">.createObjectURL</em>(<em id="red">new</em> <em id="purple">Blob</em>([data], {type: 'text/json'}))</p>
            <p>&ensp;&ensp; <em id="red">var</em> a = <em id="command">document.createElement</em>('a')</p>
            <p>&ensp;&ensp; <em id="command">document.body.appendChild</em>(a)</p>
            <p>&ensp;&ensp; a.<em id="command">style</em> = 'display: none'</p>
            <p>&ensp;&ensp; a.<em id="command">href</em> = url</p>
            <p>&ensp;&ensp; a.download = fileName</p>
            <p>&ensp;&ensp; a.<em id="command">click</em>()</p>
            <p>&ensp;&ensp; <em id="command">window.URL</em><em id="purple">.revokeObjectURL</em>(url)
            <p>&ensp; },</p>
            <p>}</p>
        </div>
        <li id="latencyid">Generate your own survey.json file from <a href="https://surveyjs.io/Survey/Builder" >Survey Builder</a> and add it to the client folder of the stage.</li>
       <li id="latencyid">Edit the client.html, thanks.html as you want in order to get the desiret visual experience of the survey.</li>
    </ol>
    <h4 class="pinstall">Overview</h4>
    <p class="pinstall">You are more than welcomed to press on <a href="https://github.com/asbjoern1982/monsterr-modules/tree/master/src/database">
            Github link</a>. You can look into stages/survey folder to see the client and server files.  </p>
</div>
