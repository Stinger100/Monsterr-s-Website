<% include ../partials/header.ejs %>
<% include ../partials/sidebar.ejs %>
<div class="container">
    <div class="row">
        <div class="block m-auto txt-center">
            <h1 class="abouth1">Events</h1>
        </div>
    </div>
    <hr class="my-4" id="hrinstall">
  <p class="pinstall">
      The main way of communicating between the server and the client in monsterr is through events. Events have a <strong>type</strong>  and a <strong>payload.</strong>
      <strong>The type</strong> is simply a string, whereas the <strong>payload </strong> should just be serializable. When sending events you use the helper <strong>send(type, payload)</strong>
      instead of supplying the raw event.
  </p>
    <div class="installcomands">
        <p id="comment">//Samples:</p>
        <p><em id="command">send</em>('eventIdentifier', 'myData')</p>
        <p id="comment">/* {:</p>
        <p id="comment">&ensp; type: 'eventIdentifier',</p>
        <p id="comment">&ensp; payload:'myData'</p>
        <p id="comment">} */</p>
        <p><em id="command">send</em>('someEvent', { my: 'data' })</p>
        <p id="comment">/* {:</p>
        <p id="comment">&ensp; type: 'someEvent',</p>
        <p id="comment">&ensp; payload: {my: 'data'} </p>
        <p id="comment">} */</p>
        <p><em id="command">send</em>('123', {</p>
        <p>&ensp;some: {</p>
        <p>&ensp;&ensp;more: {</p>
        <p>&ensp;&ensp;&ensp; complex: 'data',</p>
        <p>&ensp;&ensp;&ensp; with: 'numbers',</p>
        <p>&ensp;&ensp;&ensp; too: 123</p>
        <p>&ensp;&ensp;&ensp; }</p>
        <p>&ensp;&ensp; }</p>
        <p>})</p>
        <p id="comment">/* {</p>
        <p id="comment">&ensp; type: '123',</p>
        <p id="comment">&ensp; payload: {</p>
        <p id="comment">&ensp;&ensp; some: {</p>
        <p id="comment">&ensp;&ensp;&ensp; more: {</p>
        <p id="comment">&ensp;&ensp;&ensp;&ensp; complex: 'data',</p>
        <p id="comment">&ensp;&ensp;&ensp;&ensp; with: 'numbers',</p>
        <p id="comment">&ensp;&ensp;&ensp;&ensp; too: 123</p>
        <p id="comment">&ensp;&ensp;&ensp; }</p>
        <p id="comment">&ensp;&ensp; }</p>
        <p id="comment">&ensp; }</p>
        <p id="comment">} */</p>
    </div>
    <div class="row">
        <h4 class="pinstall">Handling events</h4>

    </div>
    <p class="pinstall">You define your event handlers and pass them to <em>createServer/createClient.</em></p>

<div class="row">
    <h4 class="pinstall">Client side</h4>
</div>
<p class="pinstall">On the client side each event handler is simply passed the <em> monsterrClient</em> instance and the data of the event.</p>
<div class="installcomands"><p>let events = {</p>
            <p><em id="purple">&ensp; myEvent</em> (monsterrClient, clientId, data) {</p>
    <p id="comment"> &ensp;&ensp; /* handle events of type 'myEvent' here */</p>
    <p>&ensp; }</p>
    <p>}</p>
    <p>let monsterrServer = <em id="purple"> createClient</em>({</p>
    <p>&ensp; events</p>
    <p>})</p>
</div>
    <div class="row">
        <h4 class="pinstall">
            Server side
        </h4>
    </div>
    <p class="pinstall">Server-side events are also passed a clientId, but are otherwise handled exactly the same as on the client.</p>
    <div class="installcomands"><p>let events = {</p>
        <p><em id="purple">&ensp; myEvent</em> (monsterrServer, clientId, data) {</p>
        <p id="comment">&ensp;&ensp; /* handle events of type 'myEvent' here */</p>
        <p>&ensp;}</p>
        <p>}</p>
        <p>let monsterrServer = <em id="purple">createServer</em>({</p>
        <p>&ensp;events</p>
        <p>})</p>
    </div>
    <div class="row">
        <h4 class="pinstall">Sending events</h4>
    </div>
    <p class="pinstall">When sending events, there are substantial differences depending on whether you are working client side or server side.</p>
    <div class="row">
        <h4 class="pinstall">Client side</h4>
    </div>
    <p class="pinstall">From the client you can only send events to the server. To do that simply use <em> monsterr.send</em>:</p>
    <div class="installcomands"><p>monsterr.<em id="command">send</em>('type', payload)</p></div>
    <div class="row">
        <h4 class="pinstall">Server side</h4>
    </div>
    <p class="pinstall">On the server you need to be specific about who to send the event to.</p>
    <p class="pinstall">The possible methods follow here: </p>
    <div class="installcomands">
        <p>monsterr.<em id="command">send</em> ('type', payload).<em id="purple">toAll</em>()</p>
        <p>monsterr.<em id="command">send</em> ('type', payload).<em id="purple">toClient</em>(clientId)</p>
       <p> monsterr.<em id="command">send</em>('type', payload).<em id="purple">toClients</em>([clientId1, clientId2, ...])</p>
        <p>monsterr.<em id="command">send</em>('type', payload).<em id="purple">toNeigboursOf</em>(clientId) // includes client 'clientId'</p>
        <p>monsterr.<em id="command">send</em>('type', payload).<em id="purple">toNeigboursOfExclusive</em>(clientId)</p>
        <p>monsterr.<em id="command">send</em>('type', payload).<em id="purple">toAdmin</em>() // Send only to the special admin client</p>
    </div>
    <div class="row">
        <h4 class="pinstall">Builtin Events</h4>
    </div>
        <p class="pinstall">
            Internally <em>monsterr</em> uses events as well. These are prefixed to prevent clashes with your events. Sometimes you might want to provide your own event handlers for internal events.
        </p>
        <p class="pinstall" id="note">Note: It's important to note that you will not overwrite internal events. Your handlers will be run in addition to the internal logic. They will be called after internal event handlers are called. The order is: Internal > User defined >
            User defined (stage)</p>
    <p class="pinstall">The internal events are exposed through <em>Events</em> available on client and server.</p>
    <div class="installcomands">
        <p><em id="red">import</em> { Events } <em id="red">from</em>  'monsterr'</p>
        <p id="comment">// Example use:</p>
        <p><em id="red">let</em> events <em id="red">=</em>{ </p>
        <p>&ensp; [Events.<em id="command">Client_Connected</em>] (monsterrServer, clientId) {</p>
        <p id="comment">&ensp;&ensp; // do something when client connects</p>
        <p>&ensp; }</p>
        <p>}</p>
    </div>
    <p class="pinstall">Here is a short description of each builtin event.</p>
<p class="pinstall" id="note">(S) means its triggered on server, (C) on client, (SC) on both.</p>
    <div class="row">
        <h4 class="pinstall">Client lifecycle</h4>
    </div>
    <p class="pinstall">Receives both <em>clientId</em> argument and <em>clientId</em> as <strong>payload.</strong></p>
    <ul class="pinstall">
        <li><em>Events.CLIENT_CONNECTED</em> (S): A new client connected.</li>
        <li><em>Events.CLIENT_RECONNECTED</em> (S): A client reconnected before timing out.</li>
        <li><em>Events.CLIENT_DISCONNECTED</em> (S): A client disconnected, possibly due to timing out.</li>
    </ul>
    <div class="row">
        <h4 class="pinstall">Stages lifecycle</h4>
    </div>
    <p class="pinstall">These relate the game progression</p>
    <ul class="pinstall">
        <li><em>Events.START_STAGE</em> (SC): A stage is starting. Receives <em>stageNo</em> as payload. The event tells a client to start the stage.</li>
        <li><em>Events.END_STAGE</em> (SC): A stage is ending. Receives <em>stageNo</em> as payload. The event tells a client to end the stage.</li>
        <li><em>Events.GAME_OVER</em> (SC): All stages have ended. Receives no payload. The event tells the client it's done.</li>
        <li><em>Events.STAGE_FINISHED</em> (S): A client finished a stage (but other clients might not have yet). This event is only fired if
            stage is timed on client and when all client have reported 'finished' an <em>END_STAGE</em> will be fired. You would most likely do well
            to avoid this event as you can't rely on it always firing. Most likely what you want is the <em>END_STAGE</em>.</li>
    </ul>
    <div class="row">
        <h4 class="pinstall"></h4>
    </div>
    <ul class="pinstall">
        <li><em>Events.LOG</em> (S): A client called <em>log()</em>. The event is simply used to do the logging serverside, but you can add to that behaviour.</li>
        <li><em>Events.MESSAGE</em> (SC): A chat message. Payload is the message. This event is used to pass messages on to neighbours.</li>
    </ul>
</div>